# Development-focused Docker Compose with monitoring and debugging tools
version: '3.8'

services:
  # Main application with development enhancements
  app:
    build:
      context: .
      target: development
    container_name: randevubu-server-dev
    ports:
      - "3001:3001"  # API server
      - "5555:5555"  # Prisma Studio
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/randevubu?schema=public
      - REDIS_URL=redis://redis:6379
      - ENABLE_METRICS=true
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
      - dev_logs:/var/log/randevubu
    command: sh -c "npx prisma generate && npm run dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - randevubu-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # PostgreSQL with development optimizations
  postgres:
    image: postgres:15-alpine
    container_name: randevubu-postgres-dev
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=randevubu
      # Development logging
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - postgres_logs:/var/log/postgresql
    networks:
      - randevubu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for development with persistence
  redis:
    image: redis:7-alpine
    container_name: randevubu-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - randevubu-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 60 1000
      --loglevel notice

  # Development Prometheus for metrics testing
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: randevubu-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    networks:
      - randevubu-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    restart: unless-stopped

  # Grafana for development monitoring
  grafana-dev:
    image: grafana/grafana:latest
    container_name: randevubu-grafana-dev
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana-dev:/etc/grafana/provisioning:ro
    networks:
      - randevubu-network
    depends_on:
      - prometheus-dev
    restart: unless-stopped

  # Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: randevubu-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - randevubu-network
    depends_on:
      - redis
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: randevubu-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - randevubu-network
    restart: unless-stopped

  # Development tools container
  dev-tools:
    image: node:20-alpine
    container_name: randevubu-dev-tools
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - dev_tools_cache:/root/.npm
    working_dir: /app
    networks:
      - randevubu-network
    command: >
      sh -c "
        npm install -g nodemon concurrently &&
        echo 'Development tools ready' &&
        tail -f /dev/null
      "
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  dev_logs:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  dev_tools_cache:
    driver: local

networks:
  randevubu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1