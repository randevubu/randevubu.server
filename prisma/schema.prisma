generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String      @id
  action    AuditAction
  entity    String?
  details   Json?
  createdAt DateTime    @default(now())
  entityId  String?
  ipAddress String?
  userAgent String?
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([entity, entityId])
  @@index([userId])
  @@map("audit_logs")
}

model Translation {
  id        String   @id @default(cuid())
  key       String
  language  String
  value     String
  namespace String   @default("notifications")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([key, language, namespace])
  @@index([language])
  @@index([namespace])
  @@index([isActive])
  @@map("translations")
}

model PhoneVerification {
  id          String              @id
  code        String
  purpose     VerificationPurpose
  attempts    Int                 @default(0)
  createdAt   DateTime            @default(now())
  expiresAt   DateTime
  isUsed      Boolean             @default(false)
  maxAttempts Int                 @default(3)
  phoneNumber String
  userId      String?
  user        User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([expiresAt])
  @@index([phoneNumber, purpose])
  @@map("phone_verifications")
}

model RefreshToken {
  id         String   @id
  token      String   @unique
  createdAt  DateTime @default(now())
  deviceId   String?
  expiresAt  DateTime
  ipAddress  String?
  isRevoked  Boolean  @default(false)
  lastUsedAt DateTime @default(now())
  userAgent  String?
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isRevoked])
  @@index([userId])
  @@map("refresh_tokens")
}

model User {
  id                     String                  @id
  avatar                 String?
  timezone               String?                 @default("Europe/Istanbul")
  language               String?                 @default("tr")
  createdAt              DateTime                @default(now())
  deletedAt              DateTime?
  failedLoginAttempts    Int                     @default(0)
  firstName              String?
  isActive               Boolean                 @default(true)
  isVerified             Boolean                 @default(false)
  lastLoginAt            DateTime?
  lastName               String?
  lockedUntil            DateTime?
  phoneNumber            String                  @unique
  updatedAt              DateTime
  appointments           Appointment[]
  auditLogs              AuditLog[]
  availabilityAlerts     AvailabilityAlert[]
  birthdayReminders      BirthdayReminder[]
  staffPositions         BusinessStaff[]
  ownedBusinesses        Business[]
  closureNotifications   ClosureNotification[]
  customerEvaluations    CustomerEvaluation[]
  authoredNotes          CustomerNote[]          @relation("NoteAuthor")
  customerNotes          CustomerNote[]
  discountCodeUsages     DiscountCodeUsage[]     @relation("DiscountCodeUsedBy")
  createdDiscountCodes   DiscountCode[]          @relation("DiscountCodeCreatedBy")
  notificationAudits     NotificationAudit[]
  notificationPreference NotificationPreference?
  phoneVerifications     PhoneVerification[]
  pushSubscriptions      PushSubscription[]
  refreshTokens          RefreshToken[]
  behavior               UserBehavior?
  grantedRoles           UserRole[]              @relation("UserRoleGrantedBy")
  userRoles              UserRole[]

  @@index([createdAt])
  @@index([isActive])
  @@index([phoneNumber])
  @@map("users")
}

model Role {
  id              String           @id
  name            String           @unique
  displayName     String
  description     String?
  level           Int              @default(0)
  isSystem        Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@index([name])
  @@index([level])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id              String           @id
  name            String           @unique
  displayName     String
  description     String?
  resource        String
  action          String
  conditions      Json?
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@index([resource])
  @@index([action])
  @@map("permissions")
}

model UserRole {
  id            String    @id
  userId        String
  roleId        String
  grantedBy     String?
  grantedAt     DateTime  @default(now())
  expiresAt     DateTime?
  isActive      Boolean   @default(true)
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  grantedByUser User?     @relation("UserRoleGrantedBy", fields: [grantedBy], references: [id])
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id
  roleId       String
  permissionId String
  conditions   Json?
  grantedBy    String?
  grantedAt    DateTime   @default(now())
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([isActive])
  @@map("role_permissions")
}

model BusinessType {
  id          String     @id
  name        String     @unique
  displayName String
  description String?
  icon        String?
  category    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]

  @@index([category])
  @@index([isActive])
  @@map("business_types")
}

model SubscriptionPlan {
  id                    String                 @id
  name                  String                 @unique
  displayName           String
  description           String?
  price                 Decimal                @db.Decimal(10, 2)
  currency              String                 @default("TRY")
  billingInterval       String
  maxBusinesses         Int                    @default(1)
  maxStaffPerBusiness   Int                    @default(5)
  maxAppointmentsPerDay Int                    @default(50)
  features              Json
  isActive              Boolean                @default(true)
  isPopular             Boolean                @default(false)
  sortOrder             Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  businessSubscriptions BusinessSubscription[]

  @@index([isActive])
  @@index([sortOrder])
  @@map("subscription_plans")
}

model StoredPaymentMethod {
  id             String                 @id
  businessId     String
  cardHolderName String
  lastFourDigits String
  cardBrand      String?
  expiryMonth    String
  expiryYear     String
  isDefault      Boolean                @default(false)
  isActive       Boolean                @default(true)
  providerToken  String?
  providerCardId String?
  metadata       Json?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  subscriptions  BusinessSubscription[]
  business       Business               @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([isDefault, isActive])
  @@map("stored_payment_methods")
}

model PricingTier {
  id           String               @id
  name         String               @unique
  displayName  String
  multiplier   Decimal              @default(1.00) @db.Decimal(5, 2)
  description  String?
  isActive     Boolean              @default(true)
  sortOrder    Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  cityMappings CityPricingMapping[]

  @@map("pricing_tiers")
}

model CityPricingMapping {
  id            String      @id
  city          String
  state         String
  country       String      @default("Turkey")
  pricingTierId String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pricingTier   PricingTier @relation(fields: [pricingTierId], references: [id])

  @@unique([city, state, country])
  @@index([pricingTierId])
  @@index([city])
  @@map("city_pricing_mappings")
}

model BusinessSubscription {
  id                 String               @id
  businessId         String               @unique
  planId             String
  status             SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean              @default(false)
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  autoRenewal        Boolean              @default(true)
  paymentMethodId    String?
  nextBillingDate    DateTime?
  failedPaymentCount Int                  @default(0)
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  business           Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  paymentMethod      StoredPaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  plan               SubscriptionPlan     @relation(fields: [planId], references: [id])
  discountCodeUsages DiscountCodeUsage[]
  payments           Payment[]

  @@index([businessId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("business_subscriptions")
}

model Business {
  id                       String                        @id
  ownerId                  String
  businessTypeId           String
  name                     String
  slug                     String                        @unique
  description              String?
  email                    String?
  phone                    String?
  website                  String?
  address                  String?
  city                     String?
  state                    String?
  country                  String?
  postalCode               String?
  latitude                 Float?
  longitude                Float?
  businessHours            Json?
  timezone                 String                        @default("Europe/Istanbul")
  primaryColor             String?
  theme                    Json?
  settings                 Json?
  isActive                 Boolean                       @default(true)
  isVerified               Boolean                       @default(false)
  verifiedAt               DateTime?
  tags                     String[]
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @updatedAt
  deletedAt                DateTime?
  closedUntil              DateTime?
  closureReason            String?
  coverImageUrl            String?
  isClosed                 Boolean                       @default(false)
  logoUrl                  String?
  profileImageUrl          String?
  galleryImages            String[]                      @default([])
  averageRating            Float?                        @default(0)
  googleIntegrationEnabled Boolean                       @default(false)
  googleLinkedAt           DateTime?
  googleLinkedBy           String?
  googlePlaceId            String?                       @unique
  lastRatingAt             DateTime?
  totalRatings             Int                           @default(0)
  googleOriginalUrl        String?
  appointments             Appointment[]
  availabilityAlerts       AvailabilityAlert[]
  birthdayReminders        BirthdayReminder[]
  closures                 BusinessClosure[]
  hoursOverrides           BusinessHoursOverride[]
  businessImages           BusinessImage[]
  notificationSettings     BusinessNotificationSettings?
  staff                    BusinessStaff[]
  subscription             BusinessSubscription?
  usageRecords             BusinessUsage[]               @relation("BusinessUsage")
  businessType             BusinessType                  @relation(fields: [businessTypeId], references: [id])
  owner                    User                          @relation(fields: [ownerId], references: [id])
  evaluationQuestions      CustomerEvaluationQuestion[]
  customerEvaluations      CustomerEvaluation[]
  customerNotes            CustomerNote[]
  dailySmsUsage            DailySmsUsage[]               @relation("DailySmsUsage")
  notificationAudits       NotificationAudit[]
  notificationUsage        NotificationUsage[]
  pushNotifications        PushNotification[]
  services                 Service[]
  storedPaymentMethods     StoredPaymentMethod[]
  workingHours             WorkingHours[]
  dailyNotebooks           BusinessDailyNotebook[]
  revenueColumns           RevenueColumn[]

  @@index([ownerId])
  @@index([googlePlaceId])
  @@index([averageRating])
  @@index([totalRatings])
  @@index([businessTypeId])
  @@index([slug])
  @@index([city, state])
  @@index([isActive, isVerified])
  @@map("businesses")
}

model BusinessStaff {
  id           String            @id
  businessId   String
  userId       String
  role         BusinessStaffRole
  permissions  Json?
  isActive     Boolean           @default(true)
  joinedAt     DateTime          @default(now())
  leftAt       DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  appointments Appointment[]
  business     Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id])
  services     ServiceStaff[]
  workingHours WorkingHours[]

  @@unique([businessId, userId])
  @@index([businessId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("business_staff")
}

model Service {
  id                 String              @id
  businessId         String
  name               String
  description        String?
  duration           Int
  price              Decimal             @db.Decimal(8, 2)
  currency           String              @default("TRY")
  image              String?
  isActive           Boolean             @default(true)
  showPrice          Boolean             @default(true)
  sortOrder          Int                 @default(0)
  pricing            Json?
  bufferTime         Int                 @default(0)
  maxAdvanceBooking  Int                 @default(30)
  minAdvanceBooking  Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  availabilityAlerts AvailabilityAlert[]
  staff              ServiceStaff[]
  business           Business            @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("services")
}

model ServiceStaff {
  id        String        @id
  serviceId String
  staffId   String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff     BusinessStaff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([serviceId, staffId])
  @@index([serviceId])
  @@index([staffId])
  @@map("service_staff")
}

model Appointment {
  id                    String                 @id
  businessId            String
  serviceId             String
  staffId               String?
  customerId            String
  date                  DateTime
  startTime             DateTime
  endTime               DateTime
  duration              Int
  status                AppointmentStatus
  price                 Decimal                @db.Decimal(8, 2)
  currency              String                 @default("TRY")
  customerNotes         String?
  internalNotes         String?
  bookedAt              DateTime               @default(now())
  confirmedAt           DateTime?
  completedAt           DateTime?
  canceledAt            DateTime?
  cancelReason          String?
  reminderSent          Boolean                @default(false)
  reminderSentAt        DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  appointment_payments  appointment_payments[]
  business              Business               @relation(fields: [businessId], references: [id])
  customer              User                   @relation(fields: [customerId], references: [id])
  service               Service                @relation(fields: [serviceId], references: [id])
  staff                 BusinessStaff?         @relation(fields: [staffId], references: [id])
  evaluations           CustomerEvaluation[]
  pushNotifications     PushNotification[]
  rescheduleSuggestions RescheduleSuggestion[]

  @@index([businessId])
  @@index([serviceId])
  @@index([staffId])
  @@index([customerId])
  @@index([date])
  @@index([status])
  @@index([startTime, endTime])
  @@index([businessId, date, status])
  @@index([customerId, status, startTime])
  @@index([businessId, staffId, date])
  @@map("appointments")
}

model WorkingHours {
  id         String         @id
  businessId String
  staffId    String?
  dayOfWeek  Int
  startTime  String
  endTime    String
  isActive   Boolean        @default(true)
  breaks     Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  business   Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  staff      BusinessStaff? @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([businessId, staffId, dayOfWeek])
  @@index([businessId])
  @@index([staffId])
  @@index([dayOfWeek])
  @@map("working_hours")
}

model BusinessImage {
  id         String   @id
  businessId String
  url        String
  alt        String?
  type       String
  sortOrder  Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([type])
  @@index([sortOrder])
  @@map("business_images")
}

model Payment {
  id                     String                @id
  amount                 Decimal               @db.Decimal(10, 2)
  currency               String                @default("TRY")
  status                 PaymentStatus
  paymentMethod          String
  paymentProvider        String
  providerPaymentId      String?
  metadata               Json?
  paidAt                 DateTime?
  failedAt               DateTime?
  refundedAt             DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  businessSubscriptionId String?
  discountCodeUsages     DiscountCodeUsage[]
  businessSubscription   BusinessSubscription? @relation(fields: [businessSubscriptionId], references: [id])

  @@index([businessSubscriptionId])
  @@index([status])
  @@index([paidAt])
  @@index([businessSubscriptionId, status, createdAt])
  @@index([status, paidAt])
  @@map("payments")
}

model appointment_payments {
  id            String        @id
  appointmentId String
  amount        Decimal       @db.Decimal(8, 2)
  currency      String        @default("TRY")
  status        PaymentStatus
  paymentMethod String
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  appointments  Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([status])
}

model UserBehavior {
  id                    String    @id
  userId                String    @unique
  totalAppointments     Int       @default(0)
  canceledAppointments  Int       @default(0)
  noShowAppointments    Int       @default(0)
  completedAppointments Int       @default(0)
  lastCancelDate        DateTime?
  cancelationsThisMonth Int       @default(0)
  cancelationsThisWeek  Int       @default(0)
  lastNoShowDate        DateTime?
  noShowsThisMonth      Int       @default(0)
  noShowsThisWeek       Int       @default(0)
  isBanned              Boolean   @default(false)
  bannedUntil           DateTime?
  banReason             String?
  banCount              Int       @default(0)
  currentStrikes        Int       @default(0)
  lastStrikeDate        DateTime?
  strikeResetDate       DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isBanned])
  @@index([currentStrikes])
  @@index([bannedUntil])
  @@map("user_behavior")
}

model CustomerNote {
  id         String   @id
  customerId String
  businessId String
  authorId   String
  noteType   String
  content    String
  isPrivate  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation("NoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([businessId])
  @@index([authorId])
  @@index([noteType])
  @@index([createdAt])
  @@map("customer_notes")
}

model CustomerEvaluation {
  id            String                     @id
  customerId    String
  businessId    String
  appointmentId String
  rating        Int
  comment       String?
  isAnonymous   Boolean                    @default(false)
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  answers       CustomerEvaluationAnswer[]
  appointment   Appointment                @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  business      Business                   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer      User                       @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([businessId])
  @@index([appointmentId])
  @@index([rating])
  @@index([createdAt])
  @@map("customer_evaluations")
}

model CustomerEvaluationAnswer {
  id           String                     @id
  evaluationId String
  questionId   String
  answer       String
  createdAt    DateTime                   @default(now())
  evaluation   CustomerEvaluation         @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  question     CustomerEvaluationQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([evaluationId])
  @@index([questionId])
  @@map("customer_evaluation_answers")
}

model CustomerEvaluationQuestion {
  id         String                     @id
  businessId String
  question   String
  type       String
  required   Boolean                    @default(false)
  options    Json?
  minRating  Int?
  maxRating  Int?
  isActive   Boolean                    @default(true)
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  answers    CustomerEvaluationAnswer[]
  business   Business                   @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([isActive])
  @@map("customer_evaluation_questions")
}

model BirthdayReminder {
  id           String    @id
  customerId   String
  businessId   String
  birthday     DateTime
  reminderDate DateTime
  sent         Boolean   @default(false)
  sentAt       DateTime?
  message      String
  createdAt    DateTime  @default(now())
  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer     User      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([businessId])
  @@index([reminderDate])
  @@index([sent])
  @@map("birthday_reminders")
}

model BusinessClosure {
  id                       String                 @id
  businessId               String
  startDate                DateTime
  endDate                  DateTime?
  reason                   String
  type                     ClosureType
  isActive                 Boolean                @default(true)
  createdBy                String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  affectedServices         Json?
  createdAppointmentsCount Int                    @default(0)
  isRecurring              Boolean                @default(false)
  notificationChannels     Json?
  notificationMessage      String?
  notifiedCustomersCount   Int                    @default(0)
  notifyCustomers          Boolean                @default(false)
  recurringPattern         Json?
  business                 Business               @relation(fields: [businessId], references: [id], onDelete: Cascade)
  notifications            ClosureNotification[]
  rescheduleSuggestions    RescheduleSuggestion[]

  @@index([businessId])
  @@index([startDate, endDate])
  @@index([isActive])
  @@index([type])
  @@index([isRecurring])
  @@map("business_closures")
}

model AvailabilityAlert {
  id                      String   @id
  customerId              String
  businessId              String
  serviceId               String?
  preferredDates          Json?
  notificationPreferences Json
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  business                Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer                User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service                 Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([businessId])
  @@index([serviceId])
  @@index([isActive])
  @@map("availability_alerts")
}

model ClosureNotification {
  id           String              @id
  closureId    String
  customerId   String
  channel      NotificationChannel
  message      String
  sentAt       DateTime?
  status       NotificationStatus  @default(PENDING)
  errorMessage String?
  createdAt    DateTime            @default(now())
  closure      BusinessClosure     @relation(fields: [closureId], references: [id], onDelete: Cascade)
  customer     User                @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([closureId])
  @@index([customerId])
  @@index([status])
  @@index([sentAt])
  @@map("closure_notifications")
}

model RescheduleSuggestion {
  id                    String            @id
  originalAppointmentId String
  closureId             String
  suggestedDates        Json
  customerResponse      CustomerResponse?
  responseAt            DateTime?
  createdAt             DateTime          @default(now())
  closure               BusinessClosure   @relation(fields: [closureId], references: [id], onDelete: Cascade)
  originalAppointment   Appointment       @relation(fields: [originalAppointmentId], references: [id], onDelete: Cascade)

  @@index([originalAppointmentId])
  @@index([closureId])
  @@index([customerResponse])
  @@map("reschedule_suggestions")
}

model DiscountCode {
  id                String              @id
  code              String              @unique
  name              String?
  description       String?
  discountType      DiscountType
  discountValue     Decimal             @db.Decimal(10, 2)
  maxUsages         Int                 @default(1)
  currentUsages     Int                 @default(0)
  isActive          Boolean             @default(true)
  validFrom         DateTime            @default(now())
  validUntil        DateTime?
  minPurchaseAmount Decimal?            @db.Decimal(10, 2)
  applicablePlans   String[]            @default([])
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdById       String?
  usages            DiscountCodeUsage[]
  createdBy         User?               @relation("DiscountCodeCreatedBy", fields: [createdById], references: [id])

  @@index([code])
  @@index([isActive])
  @@index([validFrom, validUntil])
  @@map("discount_codes")
}

model DiscountCodeUsage {
  id                     String                @id
  discountCodeId         String
  businessSubscriptionId String?
  paymentId              String?
  userId                 String
  discountAmount         Decimal               @db.Decimal(10, 2)
  originalAmount         Decimal               @db.Decimal(10, 2)
  finalAmount            Decimal               @db.Decimal(10, 2)
  usedAt                 DateTime              @default(now())
  metadata               Json?
  businessSubscription   BusinessSubscription? @relation(fields: [businessSubscriptionId], references: [id])
  discountCode           DiscountCode          @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  payment                Payment?              @relation(fields: [paymentId], references: [id])
  user                   User                  @relation("DiscountCodeUsedBy", fields: [userId], references: [id])

  @@index([discountCodeId])
  @@index([userId])
  @@index([usedAt])
  @@map("discount_code_usages")
}

model BusinessUsage {
  id                  String   @id
  businessId          String
  month               Int
  year                Int
  smssSent            Int      @default(0)
  appointmentsCreated Int      @default(0)
  staffMembersActive  Int      @default(0)
  customersAdded      Int      @default(0)
  servicesActive      Int      @default(0)
  storageUsedMB       Int      @default(0)
  apiCallsCount       Int      @default(0)
  lastUpdatedAt       DateTime @updatedAt
  createdAt           DateTime @default(now())
  business            Business @relation("BusinessUsage", fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, month, year])
  @@index([businessId])
  @@index([month, year])
  @@index([businessId, year, month])
  @@map("business_usage")
}

model DailySmsUsage {
  id         String   @id
  businessId String
  date       DateTime @db.Date
  smsCount   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation("DailySmsUsage", fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@index([businessId])
  @@index([date])
  @@map("daily_sms_usage")
}

model BusinessHoursOverride {
  id               String   @id
  businessId       String
  date             DateTime @db.Date
  isOpen           Boolean
  openTime         String?
  closeTime        String?
  breaks           Json?
  reason           String?
  isRecurring      Boolean  @default(false)
  recurringPattern Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  business         Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@index([businessId])
  @@index([date])
  @@index([isRecurring])
  @@map("business_hours_overrides")
}

model PushSubscription {
  id                String             @id
  userId            String
  endpoint          String
  p256dh            String
  auth              String
  deviceName        String?
  deviceType        String?            @default("web")
  userAgent         String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastUsedAt        DateTime           @default(now())
  pushNotifications PushNotification[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@index([isActive])
  @@index([lastUsedAt])
  @@map("push_subscriptions")
}

model NotificationPreference {
  id                          String   @id
  userId                      String   @unique
  enableAppointmentReminders  Boolean  @default(true)
  enableBusinessNotifications Boolean  @default(true)
  enablePromotionalMessages   Boolean  @default(false)
  reminderTiming              Json     @default("{\"hours\": [1, 24]}")
  preferredChannels           Json     @default("{\"channels\": [\"PUSH\", \"SMS\"]}")
  quietHours                  Json?
  timezone                    String   @default("Europe/Istanbul")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification_preferences")
}

model PushNotification {
  id             String             @id
  subscriptionId String
  appointmentId  String?
  businessId     String?
  title          String
  body           String
  icon           String?
  badge          String?
  data           Json?
  status         NotificationStatus @default(PENDING)
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  errorMessage   String?
  retryCount     Int                @default(0)
  maxRetries     Int                @default(3)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  appointment    Appointment?       @relation(fields: [appointmentId], references: [id])
  business       Business?          @relation(fields: [businessId], references: [id])
  subscription   PushSubscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([appointmentId])
  @@index([businessId])
  @@index([status])
  @@index([sentAt])
  @@index([createdAt])
  @@map("push_notifications")
}

model BusinessNotificationSettings {
  id                         String   @id
  businessId                 String   @unique
  enableAppointmentReminders Boolean  @default(true)
  reminderChannels           Json     @default("[\"PUSH\"]")
  reminderTiming             Json     @default("[60, 1440]")
  smsEnabled                 Boolean  @default(false)
  pushEnabled                Boolean  @default(true)
  emailEnabled               Boolean  @default(false)
  quietHours                 Json?
  timezone                   String   @default("Europe/Istanbul")
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  business                   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("business_notification_settings")
}

model NotificationAudit {
  id             String   @id
  businessId     String
  userId         String
  eventType      String
  action         String
  details        Json?
  recipientCount Int?
  success        Boolean
  errorCode      String?
  errorMessage   String?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([success])
  @@map("notification_audits")
}

model NotificationUsage {
  id             String   @id
  businessId     String
  sentAt         DateTime @default(now())
  type           String
  recipientCount Int      @default(1)
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([sentAt])
  @@index([type])
  @@map("notification_usage")
}

enum AuditAction {
  USER_REGISTER
  USER_LOGIN
  USER_LOGOUT
  USER_UPDATE
  USER_DELETE
  USER_LOCK
  USER_UNLOCK
  PHONE_VERIFY
  TOKEN_REFRESH
  PASSWORD_RESET

  @@map("audit_action")
}

enum VerificationPurpose {
  REGISTRATION
  LOGIN
  PHONE_CHANGE
  ACCOUNT_RECOVERY
  STAFF_INVITATION

  @@map("verification_purpose")
}

enum SystemRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  SUPPORT
  USER
  GUEST

  @@map("system_role")
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  ADMIN
  MODERATE
  APPROVE
  REJECT
  ASSIGN
  REVOKE

  @@map("permission_action")
}

enum ResourceType {
  USER
  ROLE
  PERMISSION
  BOOKING
  PAYMENT
  CONTENT
  SYSTEM
  AUDIT
  NOTIFICATION
  SUPPORT

  @@map("resource_type")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED

  @@map("subscription_status")
}

enum BusinessStaffRole {
  OWNER
  MANAGER
  STAFF
  RECEPTIONIST

  @@map("business_staff_role")
}

enum AppointmentStatus {
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
  NO_SHOW

  @@map("appointment_status")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED

  @@map("payment_status")
}

enum ClosureType {
  VACATION
  MAINTENANCE
  EMERGENCY
  HOLIDAY
  STAFF_SHORTAGE
  OTHER

  @@map("closure_type")
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH

  @@map("notification_channel")
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  READ

  @@map("notification_status")
}

enum CustomerResponse {
  ACCEPTED
  DECLINED
  NO_RESPONSE

  @@map("customer_response")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT

  @@map("discount_type")
}

// Daily Notebook Models for Financial Tracking
model BusinessDailyNotebook {
  id          String        @id
  businessId  String
  year        Int
  month       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  business    Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  dailyEntries DailyEntry[]

  @@unique([businessId, year, month])
  @@index([businessId])
  @@index([year, month])
  @@map("business_daily_notebooks")
}

model RevenueColumn {
  id          String       @id
  businessId  String
  name        String
  type        ColumnType
  priority    ColumnPriority @default(MEDIUM)
  visible     Boolean      @default(true)
  sortOrder   Int          @default(0)
  isSystem    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  business    Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  dailyEntries DailyEntry[]

  @@index([businessId])
  @@index([businessId, visible])
  @@index([businessId, type])
  @@map("revenue_columns")
}

model DailyEntry {
  id         String                @id
  notebookId String
  columnId   String
  day        Int
  amount     Decimal               @default(0) @db.Decimal(10, 2)
  note       String?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  notebook   BusinessDailyNotebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  column     RevenueColumn         @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([notebookId, columnId, day])
  @@index([notebookId])
  @@index([columnId])
  @@index([notebookId, day])
  @@map("daily_entries")
}

enum ColumnType {
  INCOME
  EXPENSE

  @@map("column_type")
}

enum ColumnPriority {
  HIGH
  MEDIUM
  LOW

  @@map("column_priority")
}
