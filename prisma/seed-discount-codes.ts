import { PrismaClient, DiscountType } from '@prisma/client';

const prisma = new PrismaClient();

async function seedDiscountCodes() {
  console.log('🎫 Seeding discount codes...');

  // Clear existing discount codes
  await prisma.discountCodeUsage.deleteMany();
  await prisma.discountCode.deleteMany();

  const now = new Date();
  const nextMonth = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
  const nextYear = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);

  // Get all subscription plans to use in applicable plans
  const plans = await prisma.subscriptionPlan.findMany();
  const allPlanIds = plans.map(plan => plan.id);
  const premiumPlanIds = plans.filter(plan => 
    plan.name.toLowerCase().includes('premium') || 
    plan.name.toLowerCase().includes('professional') ||
    plan.name.toLowerCase().includes('business')
  ).map(plan => plan.id);

  const discountCodes = [
    // Welcome discount for new customers
    {
      id: `dc_welcome_${Date.now()}`,
      code: 'WELCOME20',
      name: 'New Customer Welcome',
      description: 'Welcome discount for new customers - 20% off any plan',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 20.0,
      maxUsages: 1000,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: null,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'welcome',
        autoGenerated: false,
        description: 'Welcome offer for new signups'
      }
    },

    // Early bird discount
    {
      id: `dc_early_${Date.now()}`,
      code: 'EARLY50',
      name: 'Early Bird Special',
      description: 'Limited time early bird discount - 50% off first month',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 50.0,
      maxUsages: 100,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextMonth,
      minPurchaseAmount: null,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'limited_time',
        autoGenerated: false,
        urgency: 'high'
      }
    },

    // Premium upgrade incentive
    {
      id: `dc_upgrade_${Date.now()}`,
      code: 'UPGRADE25',
      name: 'Premium Upgrade',
      description: 'Upgrade to premium plans with 25% discount',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 25.0,
      maxUsages: 500,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: 100.0,
      applicablePlans: premiumPlanIds,
      metadata: {
        category: 'upgrade',
        autoGenerated: false,
        targetAudience: 'existing_users'
      }
    },

    // Fixed amount discount for high-value plans
    {
      id: `dc_save100_${Date.now()}`,
      code: 'SAVE100',
      name: 'Save 100 TL',
      description: 'Save 100 TL on annual plans',
      discountType: DiscountType.FIXED_AMOUNT,
      discountValue: 100.0,
      maxUsages: 200,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: 500.0,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'fixed_discount',
        autoGenerated: false,
        billingType: 'annual'
      }
    },

    // Holiday special (expires soon)
    {
      id: `dc_holiday_${Date.now()}`,
      code: 'HOLIDAY40',
      name: 'Holiday Special',
      description: 'Holiday season special offer - 40% off all plans',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 40.0,
      maxUsages: 300,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000), // 7 days
      minPurchaseAmount: null,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'seasonal',
        autoGenerated: false,
        urgency: 'high',
        season: 'holiday'
      }
    },

    // VIP customer exclusive
    {
      id: `dc_vip_${Date.now()}`,
      code: 'VIP30',
      name: 'VIP Customer Exclusive',
      description: 'Exclusive discount for VIP customers - 30% off',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 30.0,
      maxUsages: 50,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: 200.0,
      applicablePlans: premiumPlanIds,
      metadata: {
        category: 'vip',
        autoGenerated: false,
        exclusivity: 'high',
        targetAudience: 'vip_customers'
      }
    },

    // Referral bonus
    {
      id: `dc_refer_${Date.now()}`,
      code: 'REFER15',
      name: 'Referral Bonus',
      description: 'Referral program bonus - 15% off for referred customers',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 15.0,
      maxUsages: 1000,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: null,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'referral',
        autoGenerated: false,
        source: 'referral_program'
      }
    },

    // Student discount
    {
      id: `dc_student_${Date.now()}`,
      code: 'STUDENT50',
      name: 'Student Discount',
      description: 'Special discount for students - 50% off basic plans',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 50.0,
      maxUsages: 500,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: null,
      applicablePlans: plans.filter(plan => 
        plan.name.toLowerCase().includes('basic') || 
        plan.name.toLowerCase().includes('starter')
      ).map(plan => plan.id),
      metadata: {
        category: 'education',
        autoGenerated: false,
        targetAudience: 'students',
        verificationRequired: true
      }
    },

    // Flash sale (very limited time)
    {
      id: `dc_flash_${Date.now()}`,
      code: 'FLASH60',
      name: 'Flash Sale',
      description: 'Flash sale - 60% off! Limited time only',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 60.0,
      maxUsages: 25,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000), // 2 days
      minPurchaseAmount: null,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'flash_sale',
        autoGenerated: false,
        urgency: 'extreme',
        promotion_type: 'flash'
      }
    },

    // Loyalty reward
    {
      id: `dc_loyal_${Date.now()}`,
      code: 'LOYAL35',
      name: 'Loyalty Reward',
      description: 'Thank you for your loyalty - 35% off renewal',
      discountType: DiscountType.PERCENTAGE,
      discountValue: 35.0,
      maxUsages: 100,
      currentUsages: 0,
      isActive: true,
      validFrom: now,
      validUntil: nextYear,
      minPurchaseAmount: 150.0,
      applicablePlans: allPlanIds,
      metadata: {
        category: 'loyalty',
        autoGenerated: false,
        targetAudience: 'returning_customers'
      }
    }
  ];

  console.log(`Creating ${discountCodes.length} discount codes...`);

  for (const discountCode of discountCodes) {
    await prisma.discountCode.create({
      data: discountCode
    });
    console.log(`✅ Created discount code: ${discountCode.code} (${discountCode.name})`);
  }

  // Create some sample usage records (for demonstration)
  console.log('Creating sample usage records...');

  // Get the first admin user (if exists) to attribute codes to
  const adminUser = await prisma.user.findFirst();

  if (adminUser) {
    // Mark some codes as used
    const welcomeCode = await prisma.discountCode.findUnique({
      where: { code: 'WELCOME20' }
    });

    if (welcomeCode) {
      // Create a sample usage
      await prisma.discountCodeUsage.create({
        data: {
          id: `dcu_${Date.now()}_sample`,
          discountCodeId: welcomeCode.id,
          userId: adminUser.id,
          discountAmount: 20.0,
          originalAmount: 100.0,
          finalAmount: 80.0,
          metadata: {
            sampleUsage: true,
            planName: 'Basic Plan'
          }
        }
      });

      // Update usage count
      await prisma.discountCode.update({
        where: { id: welcomeCode.id },
        data: { currentUsages: 1 }
      });

      console.log('✅ Created sample usage record for WELCOME20');
    }
  }

  const totalCodes = await prisma.discountCode.count();
  const activeCodes = await prisma.discountCode.count({ where: { isActive: true } });
  const totalUsages = await prisma.discountCodeUsage.count();

  console.log(`\n🎫 Discount codes seeded successfully!`);
  console.log(`   Total codes: ${totalCodes}`);
  console.log(`   Active codes: ${activeCodes}`);
  console.log(`   Sample usages: ${totalUsages}`);
  console.log(`\n💡 Available discount codes:`);
  
  for (const code of discountCodes) {
    const expiry = code.validUntil ? ` (expires: ${code.validUntil.toLocaleDateString()})` : ' (no expiry)';
    console.log(`   • ${code.code} - ${code.discountValue}${code.discountType === DiscountType.PERCENTAGE ? '%' : ' TL'} off${expiry}`);
  }
}

export default seedDiscountCodes;

// If this file is run directly, execute the seeding
if (require.main === module) {
  seedDiscountCodes()
    .catch((e) => {
      console.error('❌ Error seeding discount codes:', e);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}