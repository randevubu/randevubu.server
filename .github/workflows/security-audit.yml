name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-compose*.yml'

env:
  NODE_VERSION: '20'

jobs:
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: npm-audit.json

    - name: Check for high/critical vulnerabilities
      run: |
        HIGH_VULNS=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(npm audit --audit-level=critical --json | jq '.metadata.vulnerabilities.critical // 0')

        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"

        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found!"
          exit 1
        elif [ "$HIGH_VULNS" -gt 5 ]; then
          echo "⚠️ Too many high severity vulnerabilities!"
          exit 1
        fi

  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Hadolint (Dockerfile linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        docker build -t randevubu-security-scan:latest --target production .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'randevubu-security-scan:latest'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Upload Trivy container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'

    - name: Run Docker Scout
      if: github.event_name != 'pull_request'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: randevubu-security-scan:latest
        sarif-file: scout-results.sarif
        summary: true

    - name: Upload Docker Scout scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'scout-results.sarif'

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, dockerfile-security, secrets-scan, container-security, codeql-analysis]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# Security Audit Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Date:** $(date)" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Job Results" >> security-summary.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-summary.md
        echo "- Dockerfile Security: ${{ needs.dockerfile-security.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "" >> security-summary.md

        if [ -f npm-audit-results/npm-audit.json ]; then
          echo "## NPM Audit Summary" >> security-summary.md
          jq -r '.metadata.vulnerabilities | to_entries[] | "- \(.key): \(.value)"' npm-audit-results/npm-audit.json >> security-summary.md || true
        fi

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Fail if critical issues found
      if: needs.dependency-audit.result == 'failure' || needs.secrets-scan.result == 'failure'
      run: |
        echo "❌ Critical security issues found!"
        exit 1