
services:
  # Application service
  app:
    build:
      context: .
      target: production
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - randevubu-network
    restart: unless-stopped

  # Redis Cache (for production sessions/caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - randevubu-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "3002:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - randevubu-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  randevubu-network:
    driver: bridge