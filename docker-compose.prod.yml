version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      target: production
    container_name: randevubu-server-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/randevubu?schema=public&sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    env_file:
      - .env
    volumes:
      # Logging volume
      - app_logs:/var/log/randevubu
      # Backup directory
      - backup_data:/var/backups/randevubu
      # Read-only security policy
      - ./security/security-policy.yaml:/etc/security/policy.yaml:ro
      # Backup encryption key
      - backup_keys:/etc/backup:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - randevubu-network
    restart: unless-stopped
    # Security context
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 256M
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Process management
    init: true

  # PostgreSQL Database
  postgres:
    image: postgres:15.8-alpine3.20
    container_name: randevubu-postgres-prod
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=randevubu
      # Security settings
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      # Performance settings
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/var/lib/postgresql/backups
      - postgres_logs:/var/log/postgresql
      # Custom PostgreSQL configuration
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - randevubu-network
    ports:
      # Only expose for backup access (internal use only)
      - "127.0.0.1:5432:5432"
    # Security context
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
          pids: 100
        reservations:
          cpus: '1'
          memory: 512M
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d randevubu"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    # Process management
    init: true

  # Redis Cache
  redis:
    image: redis:7.4-alpine3.20
    container_name: randevubu-redis-prod
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      # Custom Redis configuration
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - randevubu-network
    ports:
      # Only expose for backup access (internal use only)
      - "127.0.0.1:6379:6379"
    # Security context
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 128M
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Custom Redis configuration with security
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
      --tcp-backlog 511
      --databases 16
      --logfile /var/log/redis/redis.log
      --loglevel notice
    # Process management
    init: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.27-alpine3.20
    container_name: randevubu-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - randevubu-network
    depends_on:
      app:
        condition: service_healthy
    # Security context
    user: "101:101"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 64M
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    # Process management
    init: true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: randevubu-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - randevubu-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    # Security context
    user: "65534:65534"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped
    init: true

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:11.2.0
    container_name: randevubu-grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - randevubu-network
    depends_on:
      - prometheus
    # Security context
    user: "472:472"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped
    init: true

volumes:
  # Database volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/randevubu_postgres_data
  postgres_backups:
    driver: local
  postgres_logs:
    driver: local

  # Redis volumes
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/randevubu_redis_data
  redis_logs:
    driver: local

  # Application volumes
  app_logs:
    driver: local
  backup_data:
    driver: local
  backup_keys:
    driver: local

  # Nginx volumes
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  randevubu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: randevubu-br0
      com.docker.network.driver.mtu: 1500