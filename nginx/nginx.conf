# ðŸš€ PRODUCTION-READY NGINX CONFIGURATION
# Based on Netflix, Airbnb, and Shopify best practices
# Combines: Load Balancing + Reverse Proxy + Security + Monitoring
# Optimized for: Performance, Security, Scalability

# Worker process optimization (auto-scales based on CPU cores)
worker_processes auto;
worker_rlimit_nofile 65535;

# Error logging
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;                  # Linux-optimized event model
    multi_accept on;            # Accept multiple connections at once
}

http {
    # ============================================
    # BASIC SETTINGS
    # ============================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security: Hide nginx version
    server_tokens off;

    # Enhanced logging with performance metrics (Netflix-style)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'upstream="$upstream_addr" cache="$upstream_cache_status"';

    access_log /var/log/nginx/access.log main buffer=16k flush=5s;

    # ============================================
    # PERFORMANCE OPTIMIZATIONS
    # ============================================
    sendfile on;                        # Zero-copy file transfer
    tcp_nopush on;                      # Optimize packet transmission
    tcp_nodelay on;                     # Disable Nagle's algorithm
    keepalive_timeout 65;               # Keep connections alive
    keepalive_requests 1000;            # Max requests per connection
    types_hash_max_size 2048;

    # Client settings
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    # Gzip compression (Shopify-style)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    gzip_disable "msie6";

    # ============================================
    # RATE LIMITING & DDOS PROTECTION
    # ============================================
    # General API rate limit
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;

    # Strict limits for authentication
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Very strict for payments
    limit_req_zone $binary_remote_addr zone=payments:10m rate=2r/s;

    # Public endpoints (higher limit)
    limit_req_zone $binary_remote_addr zone=public:10m rate=200r/s;

    # Connection limiting per IP
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Set custom status codes for rate limiting
    limit_req_status 429;
    limit_conn_status 429;

    # ============================================
    # LOAD BALANCING CONFIGURATION
    # ============================================
    upstream app_backend {
        # Load balancing method: least_conn (best for API servers)
        # Alternatives: round_robin (default), ip_hash (sticky sessions)
        least_conn;

        # Application instances with health checks
        server app1:3001 max_fails=3 fail_timeout=30s weight=1;
        server app2:3001 max_fails=3 fail_timeout=30s weight=1;
        server app3:3001 max_fails=3 fail_timeout=30s weight=1;

        # Connection pooling (Netflix-style optimization)
        keepalive 64;                    # Keep 64 idle connections per worker
        keepalive_requests 10000;        # Max requests per connection
        keepalive_timeout 60s;           # Idle timeout
    }

    # ============================================
    # SHARED PROXY SETTINGS (DRY Principle)
    # ============================================
    # These settings apply to all proxy_pass locations
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Request-ID $request_id;

    # Timeouts
    proxy_connect_timeout 10s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;

    # Buffering
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Retry logic (fail fast)
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 30s;

    # ============================================
    # HTTP SERVER (Redirect to HTTPS)
    # ============================================
    server {
        listen 80;
        server_name _;

        # Health check endpoint (allow HTTP for load balancers)
        location /health {
            access_log off;
            proxy_pass http://app_backend;
        }

        # Nginx status for monitoring
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ============================================
    # HTTPS SERVER (Main Production Server)
    # ============================================
    # NOTE: SSL certificates must be present for this block to work
    # For development: Run `bash scripts/generate-ssl-cert.sh` to create self-signed certs
    # For production: Use Let's Encrypt or your certificate provider
    server {
        listen 443 ssl http2;
        server_name _;

        # ============================================
        # SSL CONFIGURATION (Industry Best Practices)
        # ============================================
        # Development: Self-signed certificates (generated by scripts/generate-ssl-cert.sh)
        # Production: Replace with your actual SSL certificates
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Modern SSL protocols only (2025 standards)
        ssl_protocols TLSv1.3;

        # Modern cipher suite (prioritize performance)
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # SSL session caching (performance boost)
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # OCSP stapling (faster SSL handshakes)
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # ============================================
        # SECURITY HEADERS (Netflix/Shopify-style)
        # ============================================
        # HSTS (enforce HTTPS for 1 year)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Prevent clickjacking
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Prevent MIME sniffing
        add_header X-Content-Type-Options "nosniff" always;

        # XSS protection
        add_header X-XSS-Protection "1; mode=block" always;

        # Referrer policy
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Content Security Policy
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;

        # Permissions Policy (formerly Feature Policy)
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Cross-domain policies
        add_header X-Permitted-Cross-Domain-Policies "none" always;

        # Connection limits (20 concurrent connections per IP)
        limit_conn conn_limit 20;

        # ============================================
        # HEALTH CHECK ENDPOINT
        # ============================================
        location /health {
            access_log off;
            proxy_pass http://app_backend;
        }

        # ============================================
        # MONITORING ENDPOINT
        # ============================================
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # ============================================
        # RATE LIMITED: AUTHENTICATION ENDPOINTS
        # ============================================
        location ~ ^/api/v1/(auth|login|register|verify|reset-password|refresh-token) {
            # Strict rate limiting for auth
            limit_req zone=auth burst=10 nodelay;

            # Security: Never cache auth endpoints
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;

            # Additional security for auth
            add_header X-Content-Type-Options "nosniff" always;

            # Proxy to backend
            proxy_pass http://app_backend;
        }

        # ============================================
        # RATE LIMITED: PAYMENT ENDPOINTS
        # ============================================
        location ~ ^/api/v1/(payments|checkout|billing|invoices|refunds) {
            # Very strict rate limiting for payments
            limit_req zone=payments burst=5 nodelay;

            # Security: Never cache payment endpoints
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;

            # Proxy to backend
            proxy_pass http://app_backend;
        }

        # ============================================
        # RATE LIMITED: PUBLIC ENDPOINTS (High Traffic)
        # ============================================
        location ~ ^/api/v1/(business-types|public|services/search|businesses/search) {
            # Higher rate limit for public endpoints
            limit_req zone=public burst=50 nodelay;

            # Allow caching on client side (CDN-friendly)
            add_header Cache-Control "public, max-age=300, s-maxage=600" always;
            add_header X-Cache-Status $upstream_cache_status always;

            # Proxy to backend (Redis caching happens at app level)
            proxy_pass http://app_backend;
        }

        # ============================================
        # RATE LIMITED: PROTECTED API ENDPOINTS
        # ============================================
        location /api/v1/ {
            # Standard rate limiting for API
            limit_req zone=api burst=20 nodelay;

            # No caching for authenticated endpoints
            add_header Cache-Control "no-cache, private" always;

            # Proxy to backend
            proxy_pass http://app_backend;
        }

        # ============================================
        # STATIC FILES (if any)
        # ============================================
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            # Long cache for static assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;

            # Proxy to backend (or serve directly if you have static files)
            proxy_pass http://app_backend;
        }

        # ============================================
        # ROOT ENDPOINT
        # ============================================
        location / {
            # Standard rate limiting
            limit_req zone=api burst=50 nodelay;

            # Proxy to backend
            proxy_pass http://app_backend;
        }

        # ============================================
        # SECURITY: BLOCK SENSITIVE FILES
        # ============================================
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        location ~ \.(env|log|sql|key|pem|bak|backup|old)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # ============================================
        # SECURITY: BLOCK COMMON ATTACK PATTERNS
        # ============================================
        location ~* /(wp-admin|wp-login|wp-content|wordpress|phpmyadmin|admin|administrator|_adminer|mysql) {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # ============================================
        # SECURITY: BLOCK MALICIOUS BOTS
        # ============================================
        # Block bad bots but allow legitimate crawlers (Google, Bing)
        if ($http_user_agent ~* (semrush|ahrefs|mj12bot|majestic|scrapy|python-requests|curl/)) {
            return 403;
        }

        # Block requests with suspicious patterns
        if ($request_uri ~* (eval\(|base64_|union.*select|concat.*\(|system\(|exec\()) {
            return 403;
        }
    }
}
